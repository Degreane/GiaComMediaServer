<%#  var SeierSchema=new mongoose.Schema({
	'title'				:	{	type 	:	String	},
	'year'				:	{	type 	: Number	},
	'genres'			:	{	type 	:	String	},
	'description'	:	{	type 	:	String 	},
	'seasons'			: {	type	: [
		{
			'number': Number,
			'title': String,
			'description': String,
			'episodes': [{
				'number': Number,
				'title': String,
				'description': String,
				'file': String	
			}]
		}
	]}	
})
%>
<%  
var serieToBeEdited = {};
if (locals.newSeries) {
	serieToBeEdited={};
}else if (locals.editSeries) {
	serieToBeEdited = locals.theSerie;
}
%>
<div class="container col-12 col-md-12 col-sm-12 ">
    <div class="jumbotron " style="padding-top:5px;">
        
			<h2 class="text-center" style="border-radius: 4px; border: 1px solid; box-shadow: 1px 1px 1px 1px #f7f0f0 , 2px 2px 1px 1px;"><b><i>Serie</i></b>&nbsp;<span class="bg-info text-primary" style="border-radius: 5px;" id="serieTitle">&nbsp;<%= serieToBeEdited.title?serieToBeEdited.title: "" %>&nbsp;</span></h2> 
            <form role="form" class="form-horizontal text-primary" action="/EditSerie" name="serie" id="serie" data-pg-name="serie" title="serie" style="border-radius: 5px; box-shadow: 1px 1px 1px 1px #f9f3f3 , 2px 2px 1px 1px #000000; border: 1px solid #000000;" method="POST"> 
				
				<div class="form-group text-center">
					<label for="title" class="control-label col-sm-2">Title</label>
					<div class="col-sm-8">
						<div class="input-group">
							<input type="text" value="<%= serieToBeEdited.title?serieToBeEdited.title:"" %>" name="title" id="title" class="form-control text-center" placeholder="Serie Title" aria-describedby="title_helpId" required>
							<span class="input-group-btn" >
								<button type="button" class="btn btn-default" disabled id="SubmitSerie">Add  
									<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
								</button>
							</span>
							
						</div>
					</div>
				</div>
				<script>
					$(function(){
						/**
							Update Serie Title bar whenever the Serie title input changes.
						*/
						$('#title').on('keyup',function(e){
							e.preventDefault();
							$('#serieTitle').html("&nbsp;"+$('#title').val()+"&nbsp;")
							if ($('#title').val().trim().length > 0 ) {
								console.log('Removing')
								$('#SubmitSerie').removeAttr('disabled');
							}else{
								$('#SubmitSerie').attr('disabled',true);
								console.log('Adding')
							}
						})

						/**
							On Click (SubmitSerie) should take all in and populate into the browser as a post request
							- All Data Should be present in a global Variable theSerie
							- theSerie holds an Array of Seasons 
							- Each Season should hold an array of Episodes.

							ToDo: Complete checking Series and save it in DataBase.
						*/
						$('#SubmitSerie').on('click',function(e){
							e.preventDefault();

							alert("Saving Series \n"+JSON.stringify( theSerie,undefined,4))
						})
					})
					

				</script>
				<div class="form-group">
					<label for="year" class="control-label col-sm-2">Year</label>
					<div class="col-sm-8 text-center">
						<div>
							<input type="number" min="1900" max="3000" step="1" value="<%= serieToBeEdited.year?serieToBeEdited.year:1970 %>" name="year" id="year" class="form-control text-center" placeholder="Year Released" aria-describedby="year_helpId" required>
						</div>
					</div>
				</div>

				<div class="form-group">
					<label for="genres" class="control-label col-sm-2">Genre</label>
					<div class="col-sm-8 text-center">
						<div>
							<input type="text" value="<%= serieToBeEdited.genre?serieToBeEdited.genre:'' %>" name="genres" id="genres" class="form-control text-center" placeholder="genre " aria-describedby="genre_helpId" required>
						</div>
					</div>
				</div>

				<div class="form-group">
					<label for="description" class="control-label col-sm-2">description</label>
					<div class="col-sm-8 text-center">
						<div>
							<textarea type="text" value="" name="description" id="description" class="form-control text-center" placeholder="description " aria-describedby="description_helpId" required><%= serieToBeEdited.description?serieToBeEdited.description:'' %></textarea>
						</div>
					</div>
				</div>

				<div class="form-group col-md-10 col-md-push-1" style="border-radius: 5px; box-shadow: 1px 1px 1px 1px #f9f3f3 , 2px 2px 1px 1px #000000; border: 1px solid #000000;float:unset;margin-bottom:15px;">
					<label for="" class="control-label col-sm-1">Seasons</label>
					<div class="col-sm-9 text-center">
						<table class="table table-bordered table-striped table-responsive " style="margin:15px 0px;" id="seasonTable">
							<thead>
								<tr>
									<th class="text-center">Season No.</th>
									<th class="text-center">Episodes</th>
								</tr>
							</thead>
							<tbody id="seasonTableTbody">
							<% if (serieToBeEdited && serieToBeEdited.seasons) { %>
									<% serieToBeEdited.seasons.forEach( function(season) { %>
										<tr>
											<td><%= season.number %></td>
											<td><%= season.episodes? season.episodes.length:0 %></td>
										</tr>
									<% }) %>
								
							<% } else { %>
								<tr>
									<td colspan="2" class="text-danger bg-warning  "><strong>No Seasons Found</strong></td>
								</tr>
							<% } %>
							</tbody>
						</table>
					</div>
					<div class="col-sm-2 text-center" style="margin:15px 0px;">
						<a name="" id="newSeasonBtn" class="btn btn-primary" href="#" role="button">New Season</a>
						
					</div>
				</div>
			</form>
			<!-- Seasons Wake Up  -->
			<div class="alert alert-warning alert-dismissible " role="alert" id="newSeason" style="display:none; border-radius: 5px; box-shadow: 1px 1px 1px 1px #f9f3f3 , 2px 2px 1px 1px #000000; border: 1px solid #000000;float:unset;">
				<strong>New Season</strong> 
				<button type="button" class="close" id="newSeasonCloseBtn">
				  <span aria-hidden="true">&times;</span>
				</button>
				<hr/>
				<div class="container-fluid">
					<form class="form-horizontal text-secondary text-center" id="formSeasons">

						<div class="form-group" id="sNumberGroup">
							<label for="number" class="col-md-2 control-label">Season Number</label>
							<div class="col-md-10"> 
								<input type="text"  name="number" id="sNumber" class="form-control" placeholder="Season Number" aria-describedby="number_helpId" required>
							</div>
						</div>

						<div class="form-group" id="sTitleGroup">
							<label for="tite" class="col-md-2 control-label">Season Tite</label>
							<div class="col-md-10"> 
								<input type="text" name="title" id="sTitle" class="form-control" placeholder="Season title" aria-describedby="title_helpId" required>
							</div>
						</div>

						<div class="form-group">
							<label for="description" class="col-md-2">Season Description</label>
							<div class="col-md-10"> 
								<input type="description" min="0" step="1" name="description" id="description" class="form-control" placeholder="Season Description" aria-describedby="description_helpId" required>
							</div>
						</div>
						<div class="form-group col-md-12" style="border-radius: 5px; box-shadow: 1px 1px 1px 1px #f9f3f3 , 2px 2px 1px 1px #000000; border: 1px solid #000000;float:unset;margin-bottom:15px;">
							<label for="" class="form-label col-md-2" style="margin-top:15px;">Episodes</label>
							<div class="col-md-10">
								<table class="table table-bordered table-striped table-responsive " style="margin:15px 0px;" id="epTable">
									<thead>
										<tr>
											<th class="text-center">Episode No.</th>
											<th class="text-center">File</th>
											<th class="text-center">Actions</th>
										</tr>
									</thead>
									<tbody>
										<tr id="epTableFinalRow">
											<td colspan="3" class="" >
												<button type="button" id="newEpisode" class="btn btn-primary" style="float:right;" >
													Add New <span class="text-success glyphicon glyphicon-plus"></span>
												</button>
											</td>
										</tr>
									</tbody>
								</table>
							</div>
						</div>
						<button type="button" class="btn btn-primary" id="seasonAddOrUpdate">Submit</button>
						<script>
							$(function(){
								/**
									This button whenever clicked it shall take validate Season values and eventually update the corresponding Series (Adds New if new Season.)
									Also shall trigger the action to update Data in the Season's Table 
								*/
								var lastNumber;
								var lastTitle;
								
								$('#seasonAddOrUpdate').on('click',function(e){
									
									e.preventDefault();
									if ($('#formSeasons').find('.has-error').length == 0 && $('#sNumber').val().trim()!=="" ){
										
										$('#sNumberGroup').removeClass('has-error');
										$('#sNumberGroup').addClass('has-success');
										// Collect The Values:
										var season = {
											'episodes':JSON.parse(JSON.stringify(theEpisodes)),
											'number':parseInt($('#sNumber').val()),
											'title':$('#sTitle').val(),
											'description':$('#sDescription').val()
										}

										// compare the Season added with the already found Seasons in the array list 
										var seasonComparisonResult=!theSeasons.every(function(svalue){
											if (svalue['title'] == season['title']){
												return false;
											}else {
												return true;
											}
										});
										if (seasonComparisonResult){
											$('#sNumberGroup').addClass('has-error');
											$('#sNumberGroup').removeClass('has-success');
										}else{
											theSeasons.push(season);
											$('#newSeason').addClass('alert-info');
											$('#newSeason').removeClass('alert-danger');
											$('#newSeason').removeClass('alert-warning');
											mapSeasonTable();
											$('#newSeason').hide();
										}
										
										
									}else{
										$('#newSeason').removeClass('alert-info');
										$('#newSeason').addClass('alert-danger');
										$('#newSeason').removeClass('alert-warning');
										$('#sNumberGroup').addClass('has-error');
										$('#sNumberGroup').removeClass('has-success');
									}
								})
								$('#sNumber').on('keyup',function(e){
									e.preventDefault();
									var numberValue=$('#sNumber').val();
									if(numberValue.length > 0 &&  ["1","2","3","4","5","6","7","8","9","0"].indexOf(numberValue[numberValue.length -1 ]) !== -1 ){
										$('#sNumberGroup').removeClass('has-error');
										$('#sNumberGroup').addClass('has-success');
										$('#sTitleGroup').removeClass('has-error');
										$('#sTitleGroup').addClass('has-success');
										lastNumber=numberValue;
										$('#sTitle').val("S"+padStart(numberValue));
									}else{
										$('#sNumberGroup').addClass('has-error');
										$('#sNumberGroup').removeClass('has-success');
										$('#sTitleGroup').addClass('has-error');
										$('#sTitleGroup').removeClass('has-success');
									}
								})
							})
						</script>
					</form>
				</div>
			</div>
    </div>
	
	
	<%- include('episodeModal.ejs') %>

	<%# If we have a padStart then include padStart javascript library in the page %>
	<% if (locals.padStart) { %>
		<script>
			// load padStart from EJS 
			var padStart = <%- locals.padStart %>
		</script>
	<% } %>
	<script>
		$(function(){
			var folder={};
			var rootNode = $('#FolderList')
			/**
				Similar to mapEpisodeTable but for seasons,
				this function maps the seasons table provided by the theSeasons[] values 
			*/
			mapSeasonTable = function(){
				var sesonTable=$('#seasonTable');
				var seasonTableTbody=$('#seasonTableTbody');
				seasonTableTbody.empty();
				if ( typeof(theSeasons) == 'object' && theSeasons instanceof Array ) {
					//alert("Mapping ....\n"+JSON.stringify(theSeasons,undefined,4)+"\n------------")
					theSeasons.forEach(function(value,idx){
						//console.log('Adding '+value.title)
						var tr=$('<tr>');
						tr.attr('id','Season_'+idx);
						var tdC1=$('<td>');
						var tdC1Edit=$('<a>');
						tdC1Edit.attr('id',idx);
						tdC1Edit.attr('href','#');
						tdC1Edit.text('Edit ');
						tdC1Edit.append('<span class="glyphicon glyphicon-edit"/>');
						tdC1Edit.addClass('btn btn-xs btn-default align-right');
						tdC1.text(value.title);
						tdC1.append(tdC1Edit);
						// ToDo Need to add event onClick to Edit Season
						
						var tdC2=$('<td>');
						var episodesInSeason=value.episodes.map(function(v){
							var aElement=$('<a>');
							aElement.attr('href','#');
							aElement.attr('id',value.title+v.title);
							aElement.text(v.title)
							aElement.addClass('btn btn-default btn-xs');
							// ToDo Need to add event onClick to Edit Episode
							return aElement;
						})
						tdC2.append(episodesInSeason)
						tr.append(tdC1,tdC2)
						seasonTableTbody.append(tr);
					});
				}
			}
			/**
				Maps The Episode Hash into the Episode table in the Season selected
			*/
			mapEpisodeTable = function(){
				var epTable=$('#epTable');
					var epTableFinalRow=$('#epTableFinalRow');
					var epTableTBody=epTableFinalRow.parent();
					epTableFinalRow.siblings().remove();
				if (theEpisodes.length > 0 ){
					theEpisodes.forEach(function(episode,idx){
						var tr=$('<tr>');
						var tdEpNumber=$('<td>');
						var tdEpFile=$('<td>');
						var tdEpActions=$('<td>');
						var EditButton=$('<a>');
						//EditButton.text("Edit<"+padStart(idx)+">");
						EditButton.addClass("aEdit btn btn-default")
						EditButton.on('click',function(e){
							e.preventDefault();
							var epToBeEdited=theEpisodes[idx];
							selectedEpIdx=idx;
							$('#modelId').modal('show');
							$('#epAdd').hide();
							$('#epEdit').show();
							$('#epFile').val(epToBeEdited.file);
							$('#epNumber').val(epToBeEdited.number);
							$.ajax('/files',{
								'method':'get',
								'data':{
									folder:seriesFolder,
									include:seriesFileTypeIncludes
								},
								success:function(data,textStatus,jqXHR){
									folder=data
									rootNode.empty();
									mapFolder(folder,rootNode)
								},
								error:function(jqXHR,textStatus,err){
									$('body').append('<div class="alert alert-danger alert-dismissable ">'+err+'</div>')
								}
							})
						})
						var DeleteButton=$('<a>');
						//DeleteButton.text("Delete<"+padStart(idx)+">");
						DeleteButton.addClass('aDelete btn btn-default');
						DeleteButton.on('click',function(e){
							console.log("Deleting Idx ",idx)
							e.preventDefault();
							theEpisodes.splice(idx,1);
							console.log(theEpisodes)
							mapEpisodeTable();
						})
						tdEpNumber.text(episode.title);
						tdEpFile.text(episode.file);
						tdEpActions.append(EditButton,DeleteButton)
						tr.append(tdEpNumber,tdEpFile,tdEpActions);
						epTableTBody.append(tr);
					})
				}
			}
			/**
			* maps the files returned from the server (package map-folder)
			*/
			mapFolder=function(aNode,aDom){
				var liDom=$(aDom).find('li')
				
				
				if (aNode.isFile !== true){
					// entries exist
					if (liDom.length == 0){
						liDom=$('<li ></li>')
						var aSpan=$('<span class="acaret">'+aNode.name+'</span>')
						liDom.append(aSpan)
						aSpan.on('click',function(e){
							e.preventDefault()
							
							$(e.currentTarget).toggleClass('acaret-down');
							
							$(e.currentTarget.parentNode).children('.nested').toggleClass('active colorMe')
							
						})
						$(aDom).append(liDom)
					}
					Object.keys(aNode.entries).forEach(function(value){
						var tDom=$('<ul class="nested">');
						mapFolder(aNode.entries[value],tDom)
						$(aDom).children().append(tDom)
					})
					
				}else{
					liDom=$('<li class="aMovie" data-file="'+aNode.path+'">'+aNode.name+'</li>');
					liDom.on('click',function(e){
						e.preventDefault();
						$('.aMovie').removeClass('aselected');
						$(e.currentTarget).addClass('aselected');
						
						$('#epFile').val($(e.currentTarget).data('file').replace("/home/fbanna/Videos",''))
					})
					$(aDom).append(liDom)
				}
			}

			/**
				Show Hide New Season Panel
			*/
			$('#newSeasonBtn').on('click',function(e){
				e.preventDefault();
				$('#sNumber').val("");
				$('#sTitle').val("");
				theEpisodes.clear();
				$('#newSeason').show();
			});
			$('#newSeasonCloseBtn').on('click',function(e){
				e.preventDefault();
				$('#newSeason').hide();
			})
			
			/**
				Shows The modal to add new Episodes to the Season.
				Requests data from the server to show and populate the File Tree View.
			*/
			$('#newEpisode').on('click',function(e){
				e.preventDefault();
				$('#modelId').modal('show');
				$('#epAdd').show();
				$('#epEdit').hide();
				$('#epFile').val("");
				$('#epNumber').val("");
				$.ajax('/files',{
					'method':'get',
					'data':{
						folder:seriesFolder,
						include:seriesFileTypeIncludes
					},
					success:function(data,textStatus,jqXHR){
						folder=data
						mapFolder(folder,rootNode)
					},
					error:function(jqXHR,textStatus,err){
						$('body').append('<div class="alert alert-danger alert-dismissable ">'+err+'</div>')
					}
				})
			})
			
			
			/**
				
				On Clicked Add New Episode
				Validates input Fields before Adding Episodes.
			*/
			$('#epAdd').on('click',function(e){
				e.preventDefault();
				// Check required fields 
				if($('#epNumber').val().trim() == ""){
					$('#epNumberDiv').addClass('has-error');$('#epNumberDiv').removeClass('has-success');
					$('#epNumberDiv').parent().addClass('bg-danger');
				}else{
					$('#epNumberDiv').removeClass('has-error');$('#epNumberDiv').addClass('has-success');
					$('#epNumberDiv').parent().removeClass('bg-danger');
				}
				if($('#epFile').val().trim() == ""){ 
					$('#epFileDiv').addClass('has-error');$('#epFileDiv').removeClass('has-success');
					$('#epFileDiv').parent().addClass('bg-danger');
				}else{
					$('#epFileDiv').addClass('has-success');$('#epFileDiv').removeClass('has-error');
					$('#epFileDiv').parent().removeClass('bg-danger');
				}
				if ($('#epForm').find('.has-error').length > 0) {
					alert('Fill Corresponding needed fields');
				}else{
					// need to fill in the theEpisodes construct
					var ep={}
					ep.number=$('#epNumber').val()
					ep.file=$('#epFile').val()
					ep.title="E"+padStart(ep.number,2,"0");
					
					console.log(theEpisodes)
					
					var epExists=!theEpisodes.every(function(value){
						if (value['title']==ep['title']) {
							$('#epNumberDiv').addClass('has-error');$('#epNumberDiv').removeClass('has-success');
							$('#epNumberDiv').parent().addClass('bg-danger');
							return false;
						}else if(value['file']== ep['file']){
							$('#epFileDiv').addClass('has-error');$('#epFileDiv').removeClass('has-success');
							$('#epFileDiv').parent().addClass('bg-danger');
							return false;
						}else{
							return true;
						}
					});
					if (!(epExists && theEpisodes.length > 0 )) {
						theEpisodes.push(ep);
						mapEpisodeTable();
						// next we need to push the Episodes into the Season table
						$('#modelId').modal('hide');
					}
					
				}
			})
		});
	</script>
</div>

